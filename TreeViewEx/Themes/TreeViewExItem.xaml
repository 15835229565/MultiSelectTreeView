<ResourceDictionary
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:Controls="clr-namespace:System.Windows.Controls">

	<Style TargetType="{x:Type Controls:TreeViewExItem}">
		<Style.Triggers>
			<DataTrigger
				Binding="{Binding (VirtualizingStackPanel.IsVirtualizing), RelativeSource={RelativeSource AncestorType={x:Type Controls:TreeViewEx}}, FallbackValue=True}"
				Value="True">
				<Setter Property="ItemsControl.ItemsPanel">
					<Setter.Value>
						<ItemsPanelTemplate>
							<VirtualizingStackPanel IsItemsHost="True" />
						</ItemsPanelTemplate>
					</Setter.Value>
				</Setter>
			</DataTrigger>
		</Style.Triggers>
		<Style.Resources>
			<ResourceDictionary />
		</Style.Resources>

		<Setter Property="ContentTemplateEdit">
			<Setter.Value>
				<DataTemplate>
					<Controls:EditTextBox Text="{Binding DisplayName,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" />
				</DataTemplate>
			</Setter.Value>
		</Setter>

		<!-- Windows 7 Aero Theme colours and brushes -->
		<Setter Property="BorderBrushSelectedPreview">
			<Setter.Value>
				<SolidColorBrush Color="#7DA2CE" />
			</Setter.Value>
		</Setter>
		<Setter Property="BackgroundSelectedPreview">
			<Setter.Value>
				<LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
					<GradientStop Color="#DCEBFC" Offset="0" />
					<GradientStop Color="#C1DBFC" Offset="1" />
				</LinearGradientBrush>
			</Setter.Value>
		</Setter>
		<Setter Property="BackgroundSelectedHovered">
			<Setter.Value>
				<LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
					<GradientStop Color="#DCEBFC" Offset="0" />
					<GradientStop Color="#C1DBFC" Offset="1" />
				</LinearGradientBrush>
			</Setter.Value>
		</Setter>
		<Setter Property="BorderBrushFocused">
			<Setter.Value>
				<SolidColorBrush Color="#7DA2CE" />
			</Setter.Value>
		</Setter>
		<Setter Property="BackgroundFocused">
			<Setter.Value>
				<LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
					<GradientStop Color="#EBF4FE" Offset="0" />
					<GradientStop Color="#CFE4FE" Offset="1" />
				</LinearGradientBrush>
			</Setter.Value>
		</Setter>
		<Setter Property="BorderBrushSelected">
			<Setter.Value>
				<SolidColorBrush Color="#7DA2CE" />
			</Setter.Value>
		</Setter>
		<Setter Property="BackgroundSelected">
			<Setter.Value>
				<LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
					<GradientStop Color="#EBF4FE" Offset="0" />
					<GradientStop Color="#CFE4FE" Offset="1" />
				</LinearGradientBrush>
			</Setter.Value>
		</Setter>
		<Setter Property="BorderBrushHovered">
			<Setter.Value>
				<SolidColorBrush Color="#B8D6FB" />
			</Setter.Value>
		</Setter>
		<Setter Property="BackgroundHovered">
			<Setter.Value>
				<LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
					<GradientStop Color="#FAFBFD" Offset="0" />
					<GradientStop Color="#EBF3FD" Offset="1" />
				</LinearGradientBrush>
			</Setter.Value>
		</Setter>
		<Setter Property="BorderBrushInactive">
			<Setter.Value>
				<SolidColorBrush Color="#D9D9D9" />
			</Setter.Value>
		</Setter>
		<Setter Property="BackgroundInactive">
			<Setter.Value>
				<LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
					<GradientStop Color="#F8F8F8" Offset="0" />
					<GradientStop Color="#E5E5E5" Offset="1" />
				</LinearGradientBrush>
			</Setter.Value>
		</Setter>

		<Setter Property="KeyboardNavigation.IsTabStop" Value="False"/>
		<Setter Property="VirtualizingStackPanel.VirtualizationMode"
			Value="{Binding (VirtualizingStackPanel.VirtualizationMode), RelativeSource={RelativeSource AncestorType={x:Type Controls:TreeViewEx}}, FallbackValue=Standard}" />
		<Setter Property="VirtualizingStackPanel.IsVirtualizing" Value="False" />
		<Setter Property="Panel.Background" Value="#00FFFFFF" />
		<Setter Property="Control.HorizontalContentAlignment"
			Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ItemsControl, AncestorLevel=1}, FallbackValue=Left}" />
		<Setter Property="Control.VerticalContentAlignment"
			Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ItemsControl, AncestorLevel=1}, FallbackValue=Center}" />
		<Setter Property="Control.Padding" Value="1" />
		<Setter Property="BorderBrush" Value="Transparent" />
		<Setter Property="BorderThickness" Value="1" />
		<Setter Property="Margin" Value="0" />
		<!-- Clear the default focus rectangle which would span the entire item in full width and with all visible children -->
		<Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>

		<Setter Property="Control.Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Controls:TreeViewExItem}">
					<StackPanel>
						<Grid>
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="Auto"/>
								<!-- Set the second column width to * to have the items border expand to the right edge -->
								<ColumnDefinition Width="Auto"/>
							</Grid.ColumnDefinitions>

							<ToggleButton
								IsChecked="{Binding RelativeSource={RelativeSource AncestorType={x:Type Controls:TreeViewExItem}},Path=IsExpanded,FallbackValue=False}"
								ClickMode="Press" Name="Expander">
								<ToggleButton.Style>
									<Style TargetType="{x:Type ToggleButton}">
										<Style.Resources>
											<ResourceDictionary />
										</Style.Resources>
										<Setter Property="UIElement.Focusable" Value="False" />
										<Setter Property="FrameworkElement.Width" Value="12" />
										<Setter Property="FrameworkElement.Height" Value="16" />
										<Setter Property="Control.Template">
											<Setter.Value>
												<ControlTemplate TargetType="{x:Type ToggleButton}">
													<!-- Default expander arrow graphic -->
													<Border Padding="3,5" Background="#00FFFFFF" Width="12" Height="16">
														<Path Fill="#00FFFFFF" Stroke="#FF989898" Name="ExpandPath">
															<Path.Data>
																<PathGeometry Figures="M0,0 L0,6 L6,0 z" />
															</Path.Data>
															<Path.RenderTransform>
																<RotateTransform Angle="135" CenterX="3" CenterY="3" />
															</Path.RenderTransform>
														</Path>
													</Border>
													<ControlTemplate.Triggers>
														<!-- Make it blue when the mouse cursor is over it -->
														<Trigger Property="UIElement.IsMouseOver" Value="True">
															<Setter Property="Shape.Stroke" TargetName="ExpandPath">
																<Setter.Value>
																	<SolidColorBrush>#FF1BBBFA</SolidColorBrush>
																</Setter.Value>
															</Setter>
															<Setter Property="Shape.Fill" TargetName="ExpandPath">
																<Setter.Value>
																	<SolidColorBrush>#00FFFFFF</SolidColorBrush>
																</Setter.Value>
															</Setter>
														</Trigger>
														<!-- Rotate and make it dark when the node is expanded -->
														<Trigger Property="ToggleButton.IsChecked" Value="True">
															<Setter Property="UIElement.RenderTransform" TargetName="ExpandPath">
																<Setter.Value>
																	<RotateTransform Angle="180" CenterX="3" CenterY="3" />
																</Setter.Value>
															</Setter>
															<Setter Property="Shape.Fill" TargetName="ExpandPath">
																<Setter.Value>
																	<SolidColorBrush>#FF595959</SolidColorBrush>
																</Setter.Value>
															</Setter>
															<Setter Property="Shape.Stroke" TargetName="ExpandPath">
																<Setter.Value>
																	<SolidColorBrush>#FF262626</SolidColorBrush>
																</Setter.Value>
															</Setter>
														</Trigger>
														<!-- Make it (darker) blue when expanded and the mouse cursor is over it -->
														<MultiTrigger>
															<MultiTrigger.Conditions>
																<Condition Property="UIElement.IsMouseOver" Value="True"/>
																<Condition Property="ToggleButton.IsChecked" Value="True"/>
															</MultiTrigger.Conditions>
															<MultiTrigger.Setters>
																<Setter Property="Shape.Stroke" TargetName="ExpandPath">
																	<Setter.Value>
																		<SolidColorBrush>#FF1BBBFA</SolidColorBrush>
																	</Setter.Value>
																</Setter>
																<Setter Property="Shape.Fill" TargetName="ExpandPath">
																	<Setter.Value>
																		<SolidColorBrush>#701BBBFA</SolidColorBrush>
																	</Setter.Value>
																</Setter>
															</MultiTrigger.Setters>
														</MultiTrigger>
													</ControlTemplate.Triggers>
												</ControlTemplate>
											</Setter.Value>
										</Setter>
									</Style>
								</ToggleButton.Style>
							</ToggleButton>

							<Grid Grid.Column="1" x:Name="ElementGrid">
								<Border BorderThickness="{TemplateBinding Border.BorderThickness}"
									Padding="{TemplateBinding Control.Padding}" x:Name="headerBorder"
									BorderBrush="{TemplateBinding Border.BorderBrush}"
									Background="{TemplateBinding Panel.Background}"
									SnapsToDevicePixels="True" CornerRadius="2"
									VerticalAlignment="Center">
									<ContentPresenter FocusManager.IsFocusScope="True"
										Content="{TemplateBinding HeaderedContentControl.Header}"
										ContentTemplate="{TemplateBinding HeaderedContentControl.HeaderTemplate}"
										ContentStringFormat="{TemplateBinding HeaderedItemsControl.HeaderStringFormat}"
										ContentSource="Header" Name="PART_Header"
										HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
										VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
										SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
								</Border>
								<!-- Additional border glare inside the item -->
								<Border BorderThickness="1" BorderBrush="#80ffffff" Margin="1" SnapsToDevicePixels="True" CornerRadius="2"/>
								<!-- Focus rectangle inside the item -->
								<Rectangle StrokeDashArray="0.5 1.5" StrokeThickness="1" Stroke="Black" SnapsToDevicePixels="True" Margin="1"
									Visibility="Hidden" Name="FocusRectangle"/>
							</Grid>
						</Grid>
						<Grid Name="ItemsHostGrid">
							<Grid.Margin>
								<Thickness Left="{x:Static Controls:Constants.ItemIndent}" />
							</Grid.Margin>
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="Auto"/>
								<ColumnDefinition Width="*"/>
							</Grid.ColumnDefinitions>

							<Path Data="M0,0 L0,1" Stretch="Uniform" Name="RulerPath"
								Stroke="#60000000" StrokeDashArray="0.5 2.5"
								SnapsToDevicePixels="True" Margin="0,0,1,0" />

							<ItemsPresenter Grid.Column="1" Name="ItemsHost"/>
						</Grid>
					</StackPanel>
					<ControlTemplate.Triggers>
						<!-- Set the visibility of the item -->
						<Trigger Property="IsVisible" Value="False">
							<Setter Property="FrameworkElement.Visibility" Value="Collapsed"/>
						</Trigger>
						<!-- Set the border and background when the mouse is located over the item -->
						<!--Trigger Property="Controls:TreeViewExItem.IsMouseOver" Value="True" SourceName="ElementGrid">
							<Setter Property="Control.Background"
								Value="{Binding BackgroundHovered, RelativeSource={RelativeSource Self}}" />
							<Setter Property="Border.BorderBrush"
								Value="{Binding BorderBrushHovered, RelativeSource={RelativeSource Self}}" />
						</Trigger-->
						<!-- TEST,DEBUG: Set the border and background when the mouse is located over the item *and* TreeViewEx.HoverHighlighting = true -->
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition
									Binding="{Binding HoverHighlighting, RelativeSource={RelativeSource AncestorType={x:Type Controls:TreeViewEx}}}"
									Value="True"/>
								<Condition
									Binding="{Binding (Controls:TreeViewExItem.IsMouseOver), RelativeSource={RelativeSource Mode=Self}}"
									Value="True"/>
							</MultiDataTrigger.Conditions>
							<Setter Property="Control.Background"
								Value="{Binding BackgroundHovered, RelativeSource={RelativeSource Self}}" />
							<Setter Property="Border.BorderBrush"
								Value="{Binding BorderBrushHovered, RelativeSource={RelativeSource Self}}" />
						</MultiDataTrigger>
						<!-- Set the border and background when the item is selected -->
						<Trigger Property="Controls:TreeViewExItem.IsSelected" Value="True">
							<Setter Property="Control.Background"
								Value="{Binding BackgroundSelected, RelativeSource={RelativeSource Self}}" />
							<Setter Property="Border.BorderBrush"
								Value="{Binding BorderBrushSelected, RelativeSource={RelativeSource Self}}" />
						</Trigger>
						<!-- Set the border colour when the item is focused -->
						<Trigger Property="Controls:TreeViewExItem.IsFocused" Value="True">
							<Setter TargetName="FocusRectangle" Property="Visibility" Value="Visible"/>
						</Trigger>
						<!-- Set the border when the item is Ctrl+arrow navigated to -->
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="Controls:TreeViewExItem.IsSelectedPreview" Value="True" />
								<Condition Property="Controls:TreeViewExItem.IsSelected" Value="False" />
							</MultiTrigger.Conditions>
							<Setter Property="Border.BorderBrush"
								Value="{Binding BorderBrushSelectedPreview, RelativeSource={RelativeSource Self}}" />
							<!--Setter Property="Control.Background"
								Value="{Binding Background, RelativeSource={RelativeSource Self}}" /-->
						</MultiTrigger>
						<!-- Set the border and slightly darker background for a selected item when it is Ctrl+arrow navigated to -->
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsSelectedPreview" Value="True" />
								<Condition Property="IsSelected" Value="True" />
							</MultiTrigger.Conditions>
							<Setter Property="Control.Background"
								Value="{Binding BackgroundSelectedPreview, RelativeSource={RelativeSource Self}}" />
							<Setter Property="Border.BorderBrush"
								Value="{Binding BorderBrushSelectedPreview, RelativeSource={RelativeSource Self}}" />
						</MultiTrigger>
						<!-- Make all selected items grey when the entire Window is inactive -->
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition
									Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type Window}}, Path=IsActive, FallbackValue=False}"
									Value="False" />
								<Condition
									Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsSelected}"
									Value="True" />
							</MultiDataTrigger.Conditions>
							<Setter Property="Border.BorderBrush"
								Value="{Binding BorderBrushInactive, RelativeSource={RelativeSource Self}}" />
							<Setter Property="Control.Background"
								Value="{Binding BackgroundInactive, RelativeSource={RelativeSource Self}}" />
						</MultiDataTrigger>
						<!-- Make all selected items grey when none of this TreeView's items is focused (i.e. the TreeView is not focused) -->
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition
									Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type Controls:TreeViewEx}}, Path=IsKeyboardFocusWithin, FallbackValue=False}"
									Value="False" />
								<Condition
									Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsSelected}"
									Value="True" />
							</MultiDataTrigger.Conditions>
							<Setter Property="Border.BorderBrush"
								Value="{Binding BorderBrushInactive, RelativeSource={RelativeSource Self}}" />
							<Setter Property="Control.Background"
								Value="{Binding BackgroundInactive, RelativeSource={RelativeSource Self}}" />
						</MultiDataTrigger>
						<!-- Set a slightly darker background when the mouse is located over a selected item (after inactive grey to override it) -->
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="Controls:TreeViewExItem.IsMouseOver" Value="True" SourceName="ElementGrid"/>
								<Condition Property="IsSelected" Value="True" />
							</MultiTrigger.Conditions>
							<Setter Property="Control.Background"
								Value="{Binding BackgroundSelectedHovered, RelativeSource={RelativeSource Self}}" />
							<Setter Property="Border.BorderBrush"
								Value="{Binding BorderBrushSelected, RelativeSource={RelativeSource Self}}" />
						</MultiTrigger>
						<!-- Collapse the child items host if the node is not expanded -->
						<Trigger Property="Controls:TreeViewExItem.IsExpanded" Value="False">
							<Setter Property="UIElement.Visibility" TargetName="ItemsHostGrid" Value="Collapsed" />
						</Trigger>
						<!-- Hide the expander button if there are no child nodes -->
						<Trigger Property="ItemsControl.HasItems" Value="False">
							<Setter Property="UIElement.Visibility" TargetName="Expander" Value="Hidden" />
						</Trigger>
						<!-- Use grey text colour when the item is not enabled -->
						<Trigger Property="UIElement.IsEnabled" Value="False">
							<Setter Property="TextElement.Foreground">
								<Setter.Value>
									<DynamicResource ResourceKey="{x:Static SystemColors.GrayTextBrushKey}" />
								</Setter.Value>
							</Setter>
						</Trigger>
						<!-- Hide vertical rulers if disabled -->
						<DataTrigger
							Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type Controls:TreeViewEx}}, Path=VerticalRulers}"
							Value="False">
							<Setter TargetName="RulerPath" Property="Visibility" Value="Collapsed" />
						</DataTrigger>

						<!-- Use a different template and colours in edit mode -->
						<Trigger Property="Controls:TreeViewExItem.IsEditing" Value="True">
							<Setter Property="HeaderTemplate"
								Value="{Binding ContentTemplateEdit, RelativeSource={RelativeSource Self}}" />
							<Setter Property="Control.Background"
								Value="{Binding BackgroundSelected, RelativeSource={RelativeSource Self}}" />
							<Setter Property="Border.BorderBrush"
								Value="{Binding BorderBrushSelected, RelativeSource={RelativeSource Self}}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
</ResourceDictionary>